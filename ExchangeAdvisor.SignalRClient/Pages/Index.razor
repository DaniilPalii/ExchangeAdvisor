@page "/"
@using ExchangeAdvisor.Domain
@using ExchangeAdvisor.Domain.Services
@using ExchangeAdvisor.Domain.Values
@using Syncfusion.EJ2.Blazor.Charts
@inject IRateFetcher RateFetcher
@inject IMLRateForecaster RateForecaster

<h1>Exchange rate history</h1>
<EjsChart>
    <ChartPrimaryXAxis Title="Day" ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime"></ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Rate"></ChartPrimaryYAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@historicalDayRates" Name="History" XName="@nameof(Rate.Day)" YName="@nameof(Rate.Value)" Type="ChartSeriesType.Line">
            <ChartMarker Visible="true"></ChartMarker>
        </ChartSeries>
        <ChartSeries DataSource="@forecastDayRates" Name="Forecast" XName="@nameof(Rate.Day)" YName="@nameof(Rate.Value)" Fill="#46D246" Type="ChartSeriesType.Line">
            <ChartMarker Visible="true"></ChartMarker>
        </ChartSeries>
    </ChartSeriesCollection>
    <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
    <ChartZoomSettings EnableSelectionZooming="true" EnableMouseWheelZooming="true" EnablePinchZooming="true"
                       EnableDeferredZooming="false" EnableScrollbar="true" EnablePan="true">
    </ChartZoomSettings>
    <ChartLegendSettings Visible="true"></ChartLegendSettings>
</EjsChart>
<EjsDateRangePicker @bind-StartDate="@StartDate" @bind-EndDate="@EndDate" Width="180px" ShowClearButton="false"
                    MinDays="1" StrictMode="true">
</EjsDateRangePicker>
<EjsDropDownList @bind-Value="@BaseCurrencyName" TValue="string" Placeholder="Base currency" DataSource="@CurrencySymbols"
                 Width="80px">
</EjsDropDownList>
<EjsDropDownList @bind-Value="@ComparingCurrencyName" TValue="string" Placeholder="Comparing currency"
                 DataSource="@CurrencySymbols" Width="80px">
</EjsDropDownList>
<EjsButton @onclick="@RefreshRatesAsync" CssClass="e-flat">Refresh</EjsButton>

@code {
    IReadOnlyCollection<Rate> historicalDayRates = Array.Empty<Rate>();
    IReadOnlyCollection<Rate> forecastDayRates = Array.Empty<Rate>();
    DateTime? StartDate { get; set; } = DateTime.Today.AddDays(-30);
    DateTime? EndDate { get; set; } = DateTime.Today;
    string BaseCurrencyName { get; set; } = CurrencySymbol.EUR.ToString();
    string ComparingCurrencyName { get; set; } = CurrencySymbol.PLN.ToString();

    IReadOnlyCollection<string> CurrencySymbols { get; } = Enum.GetNames(typeof(CurrencySymbol));

    protected override async Task OnInitializedAsync()
    {
        await RefreshRatesAsync();
    }

    private async Task RefreshRatesAsync()
    {
        var baseCurrency = Converter.ToCurrencySymbol(BaseCurrencyName);
        var comparingCurrency = Converter.ToCurrencySymbol(ComparingCurrencyName);

        var rateFetchingTask = RateFetcher.FetchAsync(StartDate.Value, endDate: DateTime.Today, baseCurrency, comparingCurrency);
        var rateForecastingTask = Task.Run(
            () => RateForecaster.Forecast(baseCurrency, comparingCurrency, StartDate.Value, EndDate.Value)
                .ToArray());
        historicalDayRates = (await rateFetchingTask).ToArray();
        forecastDayRates = await rateForecastingTask;
    }
}
