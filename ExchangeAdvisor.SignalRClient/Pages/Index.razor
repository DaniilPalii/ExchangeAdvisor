@page "/"

@using ExchangeAdvisor.Domain.Helpers
@using ExchangeAdvisor.Domain.Services
@using ExchangeAdvisor.Domain.Values
@using Syncfusion.EJ2.Blazor.Charts
@using Syncfusion.EJ2.Blazor.Spinner

@using ChartValueType = Syncfusion.EJ2.Blazor.Charts.ValueType
@using DomainDateRange = Domain.Values.DateRange

@inject IRateService RateService

<h1>Exchange rate history and prediction</h1>
<EjsChart ID="@ChartId">
    <ChartPrimaryXAxis Title="Day" ValueType="ChartValueType.DateTime"></ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Rate"></ChartPrimaryYAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@HistoricalRates" Name="History" Type="@ChartSeriesType.Line"
                     XName="@nameof(Rate.Day)" YName="@nameof(Rate.Value)">
            <ChartMarker Visible="@ShouldShowMarkers"></ChartMarker>
        </ChartSeries>
        <ChartSeries DataSource="@ForecastRates" Name="Forecast" Fill="#46D246" Type="@ChartSeriesType.Line"
                     XName="@nameof(Rate.Day)" YName="@nameof(Rate.Value)">
            <ChartMarker Visible="@ShouldShowMarkers"></ChartMarker>
        </ChartSeries>
    </ChartSeriesCollection>
    <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
    <ChartZoomSettings EnableSelectionZooming="true" EnableMouseWheelZooming="true" EnablePinchZooming="true"
                       EnableDeferredZooming="false" EnableScrollbar="true" EnablePan="true">
    </ChartZoomSettings>
    <ChartLegendSettings Visible="true"></ChartLegendSettings>
</EjsChart>
<EjsSpinner @ref="ChartLoader" Target="@ChartLoaderTargetCssSelector"></EjsSpinner>
<div>
    <EjsDateRangePicker @bind-StartDate="@StartDate" @bind-EndDate="@EndDate" Width="180px" ShowClearButton="false"
                        MinDays="1" StrictMode="true">
    </EjsDateRangePicker>
    <EjsDropDownList @bind-Value="@BaseCurrencyName" DataSource="@Currencies"
                     TValue="string" TItem="string"
                     Placeholder="Base currency" Width="80px">
    </EjsDropDownList>
    <EjsDropDownList @bind-Value="@ComparingCurrencyName" DataSource="@Currencies"
                     TValue="string" TItem="string"
                     Placeholder="Comparing currency" Width="80px">
    </EjsDropDownList>
    <EjsButton @onclick="@RefreshRatesAsync" CssClass="e-flat">Refresh</EjsButton>
</div>
<div>
    <EjsCheckBox Label="Show markers" @bind-Checked="@ShouldShowMarkers"></EjsCheckBox>
</div>

@code
{
    private IReadOnlyCollection<Rate> HistoricalRates { get; set; } = Array.Empty<Rate>();
    private IReadOnlyCollection<Rate> ForecastRates { get; set; } = Array.Empty<Rate>();
    private DateTime? StartDate { get; set; } = DateTime.Today.AddMonths(-3);
    private DateTime? EndDate { get; set; } = DateTime.Today.AddMonths(3);
    private string BaseCurrencyName { get; set; } = Currency.EUR.ToString();
    private string ComparingCurrencyName { get; set; } = Currency.PLN.ToString();
    private bool ShouldShowMarkers { get; set; } = false;
    private EjsSpinner ChartLoader { get; set; }

    private static readonly IReadOnlyCollection<string> Currencies = Enum.GetNames(typeof(Currency));
    private static readonly string ChartLoaderTargetCssSelector = $"#{ChartId}";
    private const string ChartId = "chart";

    protected override async Task OnInitializedAsync()
    {
        ChartLoader = new EjsSpinner();

        await RefreshRatesAsync();
    }

    private async Task RefreshRatesAsync()
    {
        HistoricalRates = Array.Empty<Rate>();
        ForecastRates = Array.Empty<Rate>();

        ChartLoader.ShowSpinner(ChartLoaderTargetCssSelector);

        try
        {
            var baseCurrency = Converter.ToCurrency(BaseCurrencyName);
            var comparingCurrency = Converter.ToCurrency(ComparingCurrencyName);

            var rates = (await RateService.GetAsync(
                    DomainDateRange.From(StartDate.Value).Until(EndDate.Value),
                    new CurrencyPair(baseCurrency, comparingCurrency)))
                .ToArray();

            var today = DateTime.Today;

            HistoricalRates = rates.TakeWhile(r => r.Day <= today).ToArray();
            ForecastRates = rates.Skip(HistoricalRates.Count - 1).ToArray();
        }
        finally
        {
            ChartLoader.HideSpinner(ChartLoaderTargetCssSelector);
        }
    }
}

<style>
    #@ChartId .e-spinner-pane {
        transform: translateY(-42px);
    }
</style>
