@page "/"
@using ExchangeAdvisor.Domain.Services
@using ExchangeAdvisor.Domain.Values
@using Syncfusion.EJ2.Blazor.Charts
@inject IExchangeRateFetcher ExchangeRateFetcher
@inject IExchangeRateForecaster ExchangeRateForecaster

<h1>Exchange rate history</h1>
<EjsChart>
    <ChartPrimaryXAxis Title="Day" ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime"></ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Rate"></ChartPrimaryYAxis>
    <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
    <ChartZoomSettings EnableSelectionZooming="true" EnableMouseWheelZooming="true" EnablePinchZooming="true"
                       EnableDeferredZooming="false" EnableScrollbar="true" EnablePan="true">
    </ChartZoomSettings>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@historicalDayRates" XName="Day" YName="Rate" Type="ChartSeriesType.Line">
            <ChartMarker Visible="true"></ChartMarker>
        </ChartSeries>
        <ChartSeries DataSource="@forecastDayRates" XName="Day" YName="Rate" Fill="#46D246" Type="ChartSeriesType.Line">
            <ChartMarker Visible="true"></ChartMarker>
        </ChartSeries>
    </ChartSeriesCollection>
</EjsChart>
<EjsDateRangePicker @bind-StartDate="@StartDate" @bind-EndDate="@EndDate" Width="180px" ShowClearButton="false"
                    MinDays="1" StrictMode="true">
</EjsDateRangePicker>
<EjsDropDownList @bind-Value="@BaseCurrency" TValue="string" Placeholder="Base currency" DataSource="@CurrencySymbols"
                 Width="80px">
</EjsDropDownList>
<EjsDropDownList @bind-Value="@ComparingCurrency" TValue="string" Placeholder="Comparing currency"
                 DataSource="@CurrencySymbols" Width="80px">
</EjsDropDownList>
<EjsButton @onclick="@RefreshRatesAsync" CssClass="e-flat">Refresh</EjsButton>

@code {
    IReadOnlyCollection<object> historicalDayRates = Array.Empty<object>();
    IReadOnlyCollection<object> forecastDayRates = Array.Empty<object>();
    DateTime? StartDate { get; set; } = DateTime.Today.AddDays(-30);
    DateTime? EndDate { get; set; } = DateTime.Today;
    string? BaseCurrency { get; set; } = CurrencySymbol.EUR.ToString();
    string? ComparingCurrency { get; set; } = CurrencySymbol.PLN.ToString();

    IReadOnlyCollection<string> CurrencySymbols { get; } = Enum.GetNames(typeof(CurrencySymbol));

    protected override async Task OnInitializedAsync()
    {
        await RefreshRatesAsync();
    }

    private async Task RefreshRatesAsync()
    {
        if (StartDate == null || EndDate == null || BaseCurrency == null || ComparingCurrency == null)
            return;

        if (!Enum.TryParse(BaseCurrency, out CurrencySymbol baseCurrencySymbol)
            || !Enum.TryParse(ComparingCurrency, out CurrencySymbol comparingCurrencySymbol))
            return;

        if (StartDate > DateTime.Today) StartDate = DateTime.Today;

        if (EndDate > DateTime.Today)
        {
            var nonCastedHistoricalDayRates = (await ExchangeRateFetcher
                .FetchRateHistoryAsync(StartDate.Value, DateTime.Today, baseCurrencySymbol, comparingCurrencySymbol))
                .OrderBy(r => r.Day)
                .ToArray();
            historicalDayRates = nonCastedHistoricalDayRates.Cast<object>()
                .ToArray();
            var nonCastedForecastDayRates = ExchangeRateForecaster.Forecast(nonCastedHistoricalDayRates, EndDate.Value);
            forecastDayRates = new[] { historicalDayRates.Last() }
                .Concat(nonCastedForecastDayRates.Cast<object>())
                .ToArray();
        }
        else
        {
            historicalDayRates = (await ExchangeRateFetcher
                .FetchRateHistoryAsync(StartDate.Value, EndDate.Value, baseCurrencySymbol, comparingCurrencySymbol))
                .OrderBy(r => r.Day)
                .Cast<object>()
                .ToArray();
            forecastDayRates = Array.Empty<object>();
        }
    }

}
