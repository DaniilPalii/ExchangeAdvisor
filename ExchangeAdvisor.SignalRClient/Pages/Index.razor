@page "/"
@using ExchangeAdvisor.Domain.Services
@using ExchangeAdvisor.Domain.Values
@using Syncfusion.EJ2.Blazor.Charts
@inject IExchangeRateFetcher ExchangeRateFetcher

<h1>Exchange rate history</h1>
<EjsChart>
    <ChartPrimaryXAxis Title="Day"
                       ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime">
    </ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Rate"></ChartPrimaryYAxis>
    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@dayRates"
                     XName="Day"
                     YName="Rate"
                     Type="ChartSeriesType.Line">
            <ChartMarker Visible="true"></ChartMarker>
            <ChartTrendlines>
                @if (shouldShowTrendline)
                {
                    <ChartTrendline Type="TrendlineTypes.Exponential"
                                    Width="1"
                                    Name="Exponential"
                                    Fill="#21427D">
                        <ChartTrendlineMarker Visible="false"></ChartTrendlineMarker>
                    </ChartTrendline>
                }
            </ChartTrendlines>
        </ChartSeries>
    </ChartSeriesCollection>
</EjsChart>

@code {
    IReadOnlyCollection<object> dayRates = Array.Empty<object>();
    bool shouldShowTrendline = true;

    protected override async Task OnInitializedAsync()
    {
        await FetchRateHistoryAsync();
    }

    private async Task FetchRateHistoryAsync()
    {
        var fetchedDayRates = await ExchangeRateFetcher.FetchRateHistoryAsync(
            DateTime.Today.AddDays(-60),
            DateTime.Today,
            CurrencySymbol.EUR,
            CurrencySymbol.PLN);
        dayRates = fetchedDayRates
            .OrderBy(r => r.Day)
            .Cast<object>()
            .ToArray();
    }

}
