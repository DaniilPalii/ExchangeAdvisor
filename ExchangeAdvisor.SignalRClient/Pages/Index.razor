@page "/"
@using ExchangeAdvisor.Domain.Services
@using ExchangeAdvisor.Domain.Values
@using Syncfusion.EJ2.Blazor.Charts
@inject IExchangeRateFetcher ExchangeRateFetcher

<h1>Exchange rate history</h1>
<EjsChart>
    <ChartPrimaryXAxis Title="Day"
                       ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime">
    </ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Rate"></ChartPrimaryYAxis>
    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@dayRates"
                     XName="Day"
                     YName="Rate"
                     Type="ChartSeriesType.Line">
            <ChartMarker Visible="true"></ChartMarker>
        </ChartSeries>
    </ChartSeriesCollection>
</EjsChart>
<EjsDateRangePicker @bind-StartDate="@StartDate" @bind-EndDate="@EndDate" CssClass="date-range-picker"></EjsDateRangePicker>
<EjsButton @onclick="@FetchRateHistoryAsync" CssClass="e-flat">Refresh</EjsButton>

@code {
    IReadOnlyCollection<object> dayRates = Array.Empty<object>();
    DateTime? StartDate { get; set; } = DateTime.Today.AddDays(-30);
    DateTime? EndDate { get; set; } = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        await FetchRateHistoryAsync();
    }

    private async Task FetchRateHistoryAsync()
    {
        if (!StartDate.HasValue || !EndDate.HasValue) return;
        
        var fetchedDayRates = await ExchangeRateFetcher.FetchRateHistoryAsync(
            StartDate.Value,
            EndDate.Value,
            CurrencySymbol.EUR,
            CurrencySymbol.PLN);
        dayRates = fetchedDayRates
            .OrderBy(r => r.Day)
            .Cast<object>()
            .ToArray();
    }
}

<style>
    .date-range-picker.e-input-group {
        width: 200px;
    }
</style>
