@page "/"
@using ExchangeAdvisor.Domain.Helpers
@using ExchangeAdvisor.Domain.Services
@using ExchangeAdvisor.Domain.Values
@using Syncfusion.EJ2.Blazor.Charts
@inject IRateService RateService

<h1>Exchange rate history</h1>
<EjsChart>
    <ChartPrimaryXAxis Title="Day" ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime"></ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Rate"></ChartPrimaryYAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@HistoricalRates" Name="History" Type="@ChartSeriesType.Line"
                     XName="@nameof(Rate.Day)" YName="@nameof(Rate.Value)">
            <ChartMarker Visible="@ShouldShowMarkers"></ChartMarker>
        </ChartSeries>
        <ChartSeries DataSource="@ForecastRates" Name="Forecast" Fill="#46D246" Type="@ChartSeriesType.Line"
                     XName="@nameof(Rate.Day)" YName="@nameof(Rate.Value)">
            <ChartMarker Visible="@ShouldShowMarkers"></ChartMarker>
        </ChartSeries>
    </ChartSeriesCollection>
    <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
    <ChartZoomSettings EnableSelectionZooming="true" EnableMouseWheelZooming="true" EnablePinchZooming="true"
                       EnableDeferredZooming="false" EnableScrollbar="true" EnablePan="true">
    </ChartZoomSettings>
    <ChartLegendSettings Visible="true"></ChartLegendSettings>
</EjsChart>
<div>
    <EjsDateRangePicker @bind-StartDate="@StartDate" @bind-EndDate="@EndDate" Width="180px" ShowClearButton="false"
                        MinDays="1" StrictMode="true">
    </EjsDateRangePicker>
    <EjsDropDownList @bind-Value="@BaseCurrencyName" DataSource="@Currencies" TValue="string"
                     Placeholder="Base currency" Width="80px">
    </EjsDropDownList>
    <EjsDropDownList @bind-Value="@ComparingCurrencyName" DataSource="@Currencies" TValue="string"
                     Placeholder="Comparing currency" Width="80px">
    </EjsDropDownList>
    <EjsButton @onclick="@RefreshRatesAsync" CssClass="e-flat">Refresh</EjsButton>
</div>
<div>
    <EjsCheckBox Label="Show markers" @bind-Checked="@ShouldShowMarkers"></EjsCheckBox>
</div>

@code
{
    private IReadOnlyCollection<Rate> HistoricalRates { get; set; } = Array.Empty<Rate>();
    private IReadOnlyCollection<Rate> ForecastRates { get; set; } = Array.Empty<Rate>();
    private DateTime? StartDate { get; set; } = DateTime.Today.AddDays(-30);
    private DateTime? EndDate { get; set; } = DateTime.Today;
    private string BaseCurrencyName { get; set; } = Domain.Values.Currency.EUR.ToString();
    private string ComparingCurrencyName { get; set; } = Domain.Values.Currency.PLN.ToString();
    private bool ShouldShowMarkers { get; set; } = false;
    private IReadOnlyCollection<string> Currencies { get; } = Enum.GetNames(typeof(Currency));

    protected override async Task OnInitializedAsync()
    {
        await RefreshRatesAsync();
    }

    private async Task RefreshRatesAsync()
    {
        var baseCurrency = Converter.ToCurrency(BaseCurrencyName);
        var comparingCurrency = Converter.ToCurrency(ComparingCurrencyName);

        var rates = (await RateService.GetAsync(
                new Domain.Values.DateRange(StartDate.Value, EndDate.Value),
                new CurrencyPair(baseCurrency, comparingCurrency)))
            .ToArray();

        var today = DateTime.Today;

        HistoricalRates = rates.TakeWhile(r => r.Day <= today).ToArray();
        ForecastRates = rates.Skip(HistoricalRates.Count - 1).ToArray();
    }
}
