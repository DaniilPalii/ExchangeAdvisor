@page "/"
@using ExchangeAdvisor.Domain
@using ExchangeAdvisor.Domain.Services
@using ExchangeAdvisor.Domain.Values
@using Syncfusion.EJ2.Blazor.Charts
@inject IRateService RateService
@inject IRateForecaster RateForecaster

<h1>Exchange rate history</h1>
<EjsChart>
    <ChartPrimaryXAxis Title="Day" ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime"></ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Rate"></ChartPrimaryYAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@HistoricalRates" Name="History" Type="@ChartSeriesType.Line"
                     XName="@nameof(Rate.Day)" YName="@nameof(Rate.Value)">
            <ChartMarker Visible="@ShouldShowMarkers"></ChartMarker>
        </ChartSeries>
        <ChartSeries DataSource="@ForecastRates" Name="Forecast" Fill="#46D246" Type="@ChartSeriesType.Line"
                     XName="@nameof(Rate.Day)" YName="@nameof(Rate.Value)">
            <ChartMarker Visible="@ShouldShowMarkers"></ChartMarker>
        </ChartSeries>
    </ChartSeriesCollection>
    <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
    <ChartZoomSettings EnableSelectionZooming="true" EnableMouseWheelZooming="true" EnablePinchZooming="true"
                       EnableDeferredZooming="false" EnableScrollbar="true" EnablePan="true">
    </ChartZoomSettings>
    <ChartLegendSettings Visible="true"></ChartLegendSettings>
</EjsChart>
<div>
    <EjsDateRangePicker @bind-StartDate="@StartDate" @bind-EndDate="@EndDate" Width="180px" ShowClearButton="false"
                        MinDays="1" StrictMode="true">
    </EjsDateRangePicker>
    <EjsDropDownList @bind-Value="@BaseCurrencyName" DataSource="@CurrencySymbols" TValue="string"
                     Placeholder="Base currency" Width="80px">
    </EjsDropDownList>
    <EjsDropDownList @bind-Value="@ComparingCurrencyName" DataSource="@CurrencySymbols" TValue="string"
                     Placeholder="Comparing currency" Width="80px">
    </EjsDropDownList>
    <EjsButton @onclick="@RefreshRatesAsync" CssClass="e-flat">Refresh</EjsButton>
</div>
<div>
    <EjsCheckBox Label="Show markers" @bind-Checked="@ShouldShowMarkers"></EjsCheckBox>
</div>

@code
{
    private IReadOnlyCollection<Rate> HistoricalRates { get; set; } = Array.Empty<Rate>();
    private IReadOnlyCollection<Rate> ForecastRates { get; set; } = Array.Empty<Rate>();
    private DateTime? StartDate { get; set; } = DateTime.Today.AddDays(-30);
    private DateTime? EndDate { get; set; } = DateTime.Today;
    private string BaseCurrencyName { get; set; } = CurrencySymbol.EUR.ToString();
    private string ComparingCurrencyName { get; set; } = CurrencySymbol.PLN.ToString();
    private bool ShouldShowMarkers { get; set; } = false;
    private IReadOnlyCollection<string> CurrencySymbols { get; } = Enum.GetNames(typeof(CurrencySymbol));

    protected override async Task OnInitializedAsync()
    {
        await RefreshRatesAsync();
    }

    private async Task RefreshRatesAsync()
    {
        var baseCurrency = Converter.ToCurrencySymbol(BaseCurrencyName);
        var comparingCurrency = Converter.ToCurrencySymbol(ComparingCurrencyName);

        var fetchingRatesTask = RateService.FetchHistoricalRatesAsync(baseCurrency, comparingCurrency);
        ForecastRates = RateForecaster.Forecast(baseCurrency, comparingCurrency, StartDate.Value, EndDate.Value).ToArray();
        HistoricalRates = (await fetchingRatesTask).ToArray();
    }
}
