@page "/"
@using ExchangeAdvisor.Domain.Services
@using ExchangeAdvisor.Domain.Services.Implementation
@using ExchangeAdvisor.Domain.Values
@using Syncfusion.EJ2.Blazor.Charts
@inject IExchangeRateFetcher ExchangeRateFetcher
@inject IExchangeRateForecaster ExchangeRateForecaster

<h1>Exchange rate history</h1>
<EjsChart>
    <ChartPrimaryXAxis Title="Day" ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime"></ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Rate"></ChartPrimaryYAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@historicalDayRates" Name="History" XName="Day" YName="Rate" Type="ChartSeriesType.Line">
            <ChartMarker Visible="true"></ChartMarker>
        </ChartSeries>
        <ChartSeries DataSource="@forecastDayRates" Name="Forecast" XName="Day" YName="Rate" Fill="#46D246" Type="ChartSeriesType.Line">
            <ChartMarker Visible="true"></ChartMarker>
        </ChartSeries>
    </ChartSeriesCollection>
    <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
    <ChartZoomSettings EnableSelectionZooming="true" EnableMouseWheelZooming="true" EnablePinchZooming="true"
                       EnableDeferredZooming="false" EnableScrollbar="true" EnablePan="true">
    </ChartZoomSettings>
    <ChartLegendSettings Visible="true"></ChartLegendSettings>
</EjsChart>
<EjsDateRangePicker @bind-StartDate="@StartDate" @bind-EndDate="@EndDate" Width="180px" ShowClearButton="false"
                    MinDays="1" StrictMode="true">
</EjsDateRangePicker>
<EjsDropDownList @bind-Value="@BaseCurrency" TValue="string" Placeholder="Base currency" DataSource="@CurrencySymbols"
                 Width="80px">
</EjsDropDownList>
<EjsDropDownList @bind-Value="@ComparingCurrency" TValue="string" Placeholder="Comparing currency"
                 DataSource="@CurrencySymbols" Width="80px">
</EjsDropDownList>
<EjsButton @onclick="@RefreshRatesAsync" CssClass="e-flat">Refresh</EjsButton>

@code {
    IReadOnlyCollection<object> historicalDayRates = Array.Empty<object>();
    IReadOnlyCollection<object> forecastDayRates = Array.Empty<object>();
    DateTime? StartDate { get; set; } = DateTime.Today.AddDays(-30);
    DateTime? EndDate { get; set; } = DateTime.Today;
    string? BaseCurrency { get; set; } = CurrencySymbol.EUR.ToString();
    string? ComparingCurrency { get; set; } = CurrencySymbol.PLN.ToString();

    IReadOnlyCollection<string> CurrencySymbols { get; } = Enum.GetNames(typeof(CurrencySymbol));

    protected override async Task OnInitializedAsync()
    {
        await RefreshRatesAsync();
    }

    private async Task RefreshRatesAsync()
    {
        Enum.TryParse(BaseCurrency, out CurrencySymbol baseCurrencySymbol);
        Enum.TryParse(ComparingCurrency, out CurrencySymbol comparingCurrencySymbol);

        if (StartDate > DateTime.Today) StartDate = DateTime.Today;

//        if (EndDate > DateTime.Today)
//        {
//            var nonCastedHistoricalDayRates = (await ExchangeRateFetcher
//                .FetchRateHistoryAsync(StartDate.Value, DateTime.Today, baseCurrencySymbol, comparingCurrencySymbol))
//                .ToArray();
//            historicalDayRates = nonCastedHistoricalDayRates.Cast<object>()
//                .ToArray();
//            var nonCastedForecastDayRates = ExchangeRateForecaster.Forecast(nonCastedHistoricalDayRates, EndDate.Value);
//            forecastDayRates = new[] { historicalDayRates.Last() }
//                .Concat(nonCastedForecastDayRates.Cast<object>())
//                .ToArray();
//        }
//        else
//        {
//            historicalDayRates = (await ExchangeRateFetcher
//                .FetchRateHistoryAsync(StartDate.Value, EndDate.Value, baseCurrencySymbol, comparingCurrencySymbol))
//                .Cast<object>()
//                .ToArray();
//            forecastDayRates = Array.Empty<object>();
//        }
        
        var nonCastedHistoricalDayRates = (await ExchangeRateFetcher
            .FetchRateHistoryAsync(StartDate.Value, DateTime.Today, baseCurrencySymbol, comparingCurrencySymbol))
            .ToArray();
        historicalDayRates = nonCastedHistoricalDayRates.Cast<object>()
            .ToArray();
        forecastDayRates = ExchangeRateForecaster.ForecastOnKnownAndUnknownRange(
                nonCastedHistoricalDayRates,
                EndDate.Value,
                ForecastMethod.BarycentricInterpolatePolynomialEquidistantSorted)
            .Cast<object>()
            .ToArray();
    }

}
